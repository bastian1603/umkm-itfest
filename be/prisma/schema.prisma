// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int @id @default(autoincrement())
  username    String  @unique
  password    String
  email       String  @unique
  website     String?
  address     String?
  detail      String?
  profile_pic String?

  distributor Distributor?
  producer    Producer?

  received_application  Application[] @relation("RequestedApplication")
  sended_application    Application[] @relation("RequesterApplication")
}


model Distributor {
  user_id       Int @id
  user          User  @relation(fields: [user_id], references: [id])
  is_accept_req String
  coverage_area String

  distribute_category Distribute_category[]
}


model Producer {
  user_id           Int @id
  user              User  @relation(fields: [user_id], references: [id])

  status            Boolean
  factory_location  String

  product           Product[]
  Produce_category  Produce_category[]
}

model Category {
  id          Int @id @default(autoincrement())
  name        String

  product     Product[]
  produce     Produce_category[]

  distribute  Distribute_category[]

}

model Distribute_category {
  distributor_id    Int
  distributor       Distributor @relation(fields:[distributor_id], references:[user_id])

  category_id       Int
  category          Category @relation(fields:[category_id], references: [id])

  @@id([distributor_id, category_id])
}


model Produce_category {
  producer_id       Int
  producer          Producer  @relation(fields:[producer_id], references:[user_id])

  category_id       Int
  category          Category @relation(fields:[category_id], references:[id])

  @@id([producer_id, category_id])
}


model Product {
  id          Int @id @default(autoincrement())
  name        String
  detail      String
  pics        Product_pic[]
  
  category_id Int
  category    Category  @relation(fields: [category_id], references: [id])
  
  price       Float
  uom_id      Int
  unit_of_measurement   Unit_of_Measurement @relation(fields:[uom_id], references:[id])

  producer_id Int
  producer    Producer  @relation(fields:[producer_id], references:[user_id])

  transaction Transaction_product[]
}


model Unit_of_Measurement {
  id          Int @id @default(autoincrement())
  name        String

  product     Product[]
}


model Product_pic {
  id          Int @id @default(autoincrement())
  product_id  Int 
  product     Product @relation(fields: [product_id], references: [id])
  
  path        String
}


model Application {
  id              Int @id @default(autoincrement())
  note            String 
  reply           String
  timestamps      DateTime
  status          Int   @db.TinyInt
  
  requester_id    Int
  requester       User @relation("RequesterApplication", fields:[requester_id], references:[id]) 

  requested_id    Int
  requested       User @relation("RequestedApplication", fields:[requested_id], references:[id]) 
  
  Transaction     Transaction[]
}


model Transaction {
  id              Int @id @default(autoincrement())
  note            String
  status          Int   @db.TinyInt
  price_total     Int
  timestamps      DateTime
  requester_role  String @db.Char(1)

  application_id  Int
  application      Application @relation(fields:[application_id], references:[id])
  transaction_product Transaction_product[]
}


model Transaction_product {
  id              Int @id @default(autoincrement())
  product_id      Int
  product         Product @relation(fields:[product_id], references:[id])

  transaction_id  Int
  transaction     Transaction @relation(fields:[transaction_id], references:[id])
  amount          Float
}
